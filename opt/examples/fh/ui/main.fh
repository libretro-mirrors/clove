
fn love_joystick_pressed(j) {
}

fn love_mousepressed(m) {
}

fn love_mousereleased(m) {
}

fn love_wheelmoved(y) {
}

fn love_textinput(text) {
}

fn love_keypressed(key) {
}

fn love_keyreleased(key) {
}

fn love_quit() {
}

fn love_focus(focused) {
}

fn love_load()  {
	let self = {};

	self.window = love_ui_newWindow(40, 40, 300, 450);

        self.show_info = false;
        self.show_buttons = false;
	self.header_2 = false;

	self.show_tree = false;
	self.show_tree_1 = false;
	self.show_tree_2 = false;

	self.show_tree_3 = false;
	self.show_checkbox_1 = false;
	self.show_checkbox_2 = false;
	self.show_checkbox_3 = false;

	love_graphics_setBackgroundColor(255, 33, 76);
	self.bg = love_graphics_getBackgroundColor();
	self.r = self.bg[0];
	self.g = self.bg[1];
	self.b = self.bg[2];

	love_draw(self);
	love_update(1, self);

	return self;
}

fn test_window(self) {
        if (love_ui_begin_window(self.window, "Demo window")) {
                let container_info = love_ui_getContainerInfo(self.window);

                # limit window to minimum size
                love_ui_setContainerInfo(self.window, 
                container_info[0], #x
                container_info[1], #y
                math_max(container_info[2], 240), #w 
                math_max(container_info[3], 300)); #h

                if (love_ui_header("Window Info", self.show_info, 100)) {
                        love_ui_layout_row(2, [54, -1], 0);
                        love_ui_label("Position:");
                        love_ui_label(container_info[0] + ' ' + container_info[1]);
                        love_ui_label("Size:");
                        love_ui_label(container_info[2] + ' ' + container_info[3]);
                        self.show_info = true;
                } else {
                        self.show_info = false;
                }

        if (love_ui_header("Test Buttons", self.show_buttons, 101)) {
                love_ui_layout_row(3, [86, -110, -1], 0);
                love_ui_label("Test buttons 1:");
                if (love_ui_button("Button 1", 102)) { println("Pressed button 1"); }
                if (love_ui_button("Button 2", 103)) { println("Pressed button 2"); }
                love_ui_label("Test buttons 2:");
                if (love_ui_button("Button 3", 104)) { println("Pressed button 3"); }
                if (love_ui_button("Button 4", 105)) { println("Pressed button 4"); }
                
                self.show_buttons = true;
        } else {
                self.show_buttons = false;
        }
	
	if (love_ui_header("Tree and Text", self.show_tree, 106)) {
		love_ui_layout_row(2, [140, -1], 0);
		love_ui_layout_begin_column();
		if (love_ui_begin_tree("Test 1", self.show_tree_1, 107)) {
			love_ui_label("Hello");
			love_ui_label("world");
			love_ui_end_tree();
			self.show_tree_1 = true;
		} else {
			self.show_tree_1 = false;
		}
		if (love_ui_begin_tree("Test 1b", self.show_tree_2, 108)) {
			love_ui_button("Button 1", 109);		
			love_ui_button("Button 2", 110);
			love_ui_end_tree();		
			self.show_tree_2 = true;
		} else {
			self.show_tree_2 = false;
		}

		if (love_ui_begin_tree("Test 2", self.show_tree_3, 111)) {
			if (love_ui_checkbox("checkbox 1", self.show_checkbox_1, 112)) {
				self.show_checkbox_1 = true;
			} else {
				self.show_checkbox_1 = false;
			}
			if (love_ui_checkbox("checkbox 2", self.show_checkbox_2, 113)) {
				self.show_checkbox_2 = true;
			} else {
				self.show_checkbox_2 = false;
			}
			if (love_ui_checkbox("checkbox 3", self.show_checkbox_3, 114)) {
				self.show_checkbox_3 = true;
			} else {
				self.show_checkbox_3 = false;
			}
			love_ui_end_tree();
			self.show_tree_3 = true;
		} else {
			self.show_tree_3 = false;
		}
		love_ui_layout_end_column();

		love_ui_layout_begin_column();
		love_ui_layout_row(1, [ -1 ], 0);
		love_ui_text("Lorem ipsum dolor sit amet, consectetur adipiscing " +
		"elit. Maecenas lacinia, sem eu lacinia molestie, mi risus faucibus " +
		"ipsum, eu varius magna felis a nulla.");
		love_ui_layout_end_column();

		self.show_tree = true;
	} else {
		self.show_tree = false;
	}

	if (love_ui_header("Background Color", self.header_2, 115)) {
		#love_ui_layout_row(2, [ -78, -1 ], 74);
		# sliders 
		love_ui_layout_begin_column();
		#love_ui_layout_row(2, [ 46, -1 ], 0);
		love_ui_label("Red:");   self.r = love_ui_slider(self.bg[0], 0, 255, 116);
		love_ui_label("Green:"); self.g = love_ui_slider(self.bg[1], 0, 255, 117);
		love_ui_label("Blue:");  self.b = love_ui_slider(self.bg[2], 0, 255, 118);
		
		# 0 means no change
		if (self.r != 0) {
			self.bg[0] = self.r;
		}		
		if (self.g != 0) {
			self.bg[1] = self.g;
		}		
		if (self.b != 0) {
			self.bg[2] = self.b;
		}		

		love_ui_layout_end_column();
		# color preview
		# mu_Rect r = love_ui_layout_next(ctx); TODO
		# mu_draw_rect(ctx, r, mu_color(bg[0], bg[1], bg[2], 255)); TODO
		# sprintf(buf, "#%02X%02X%02X", (int) bg[0], (int) bg[1], (int) bg[2]);
		# mu_draw_control_text(ctx, buf, r, MU_COLOR_TEXT, MU_OPT_ALIGNCENTER);
		self.header_2 = true;
	} else {
		self.header_2 = false;
	}

	love_ui_end_window();
       }
}

fn love_update(dt, self) {
	if (love_keyboard_isDown("esc"))
		love_event_quit();

	love_ui_begin();
        test_window(self);
	love_ui_end();
}

fn love_draw(self) {
	love_graphics_setBackgroundColor(self.bg[0], self.bg[1], self.bg[2], 255);
}

fn main() {

}
